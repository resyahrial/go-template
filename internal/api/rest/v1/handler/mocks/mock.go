// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	handler "github.com/resyahrial/go-template/internal/api/rest/v1/handler"
	entities "github.com/resyahrial/go-template/internal/entities"
)

// MockRequestContext is a mock of RequestContext interface.
type MockRequestContext struct {
	ctrl     *gomock.Controller
	recorder *MockRequestContextMockRecorder
}

// MockRequestContextMockRecorder is the mock recorder for MockRequestContext.
type MockRequestContextMockRecorder struct {
	mock *MockRequestContext
}

// NewMockRequestContext creates a new mock instance.
func NewMockRequestContext(ctrl *gomock.Controller) *MockRequestContext {
	mock := &MockRequestContext{ctrl: ctrl}
	mock.recorder = &MockRequestContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestContext) EXPECT() *MockRequestContextMockRecorder {
	return m.recorder
}

// BindJSON mocks base method.
func (m *MockRequestContext) BindJSON(obj any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindJSON indicates an expected call of BindJSON.
func (mr *MockRequestContextMockRecorder) BindJSON(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockRequestContext)(nil).BindJSON), obj)
}

// MockRequestConverter is a mock of RequestConverter interface.
type MockRequestConverter struct {
	ctrl     *gomock.Controller
	recorder *MockRequestConverterMockRecorder
}

// MockRequestConverterMockRecorder is the mock recorder for MockRequestConverter.
type MockRequestConverterMockRecorder struct {
	mock *MockRequestConverter
}

// NewMockRequestConverter creates a new mock instance.
func NewMockRequestConverter(ctrl *gomock.Controller) *MockRequestConverter {
	mock := &MockRequestConverter{ctrl: ctrl}
	mock.recorder = &MockRequestConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestConverter) EXPECT() *MockRequestConverterMockRecorder {
	return m.recorder
}

// GetCreateUserRequest mocks base method.
func (m *MockRequestConverter) GetCreateUserRequest(c handler.RequestContext) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateUserRequest", c)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreateUserRequest indicates an expected call of GetCreateUserRequest.
func (mr *MockRequestConverterMockRecorder) GetCreateUserRequest(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateUserRequest", reflect.TypeOf((*MockRequestConverter)(nil).GetCreateUserRequest), c)
}

// MockResponseContext is a mock of ResponseContext interface.
type MockResponseContext struct {
	ctrl     *gomock.Controller
	recorder *MockResponseContextMockRecorder
}

// MockResponseContextMockRecorder is the mock recorder for MockResponseContext.
type MockResponseContextMockRecorder struct {
	mock *MockResponseContext
}

// NewMockResponseContext creates a new mock instance.
func NewMockResponseContext(ctrl *gomock.Controller) *MockResponseContext {
	mock := &MockResponseContext{ctrl: ctrl}
	mock.recorder = &MockResponseContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseContext) EXPECT() *MockResponseContextMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockResponseContext) Set(key string, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, obj)
}

// Set indicates an expected call of Set.
func (mr *MockResponseContextMockRecorder) Set(key, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockResponseContext)(nil).Set), key, obj)
}

// MockResponseConverter is a mock of ResponseConverter interface.
type MockResponseConverter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseConverterMockRecorder
}

// MockResponseConverterMockRecorder is the mock recorder for MockResponseConverter.
type MockResponseConverterMockRecorder struct {
	mock *MockResponseConverter
}

// NewMockResponseConverter creates a new mock instance.
func NewMockResponseConverter(ctrl *gomock.Controller) *MockResponseConverter {
	mock := &MockResponseConverter{ctrl: ctrl}
	mock.recorder = &MockResponseConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseConverter) EXPECT() *MockResponseConverterMockRecorder {
	return m.recorder
}

// SetCreateUserResponse mocks base method.
func (m *MockResponseConverter) SetCreateUserResponse(c handler.ResponseContext, user *entities.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreateUserResponse", c, user)
}

// SetCreateUserResponse indicates an expected call of SetCreateUserResponse.
func (mr *MockResponseConverterMockRecorder) SetCreateUserResponse(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreateUserResponse", reflect.TypeOf((*MockResponseConverter)(nil).SetCreateUserResponse), c, user)
}

// MockContextHandler is a mock of ContextHandler interface.
type MockContextHandler struct {
	ctrl     *gomock.Controller
	recorder *MockContextHandlerMockRecorder
}

// MockContextHandlerMockRecorder is the mock recorder for MockContextHandler.
type MockContextHandlerMockRecorder struct {
	mock *MockContextHandler
}

// NewMockContextHandler creates a new mock instance.
func NewMockContextHandler(ctrl *gomock.Controller) *MockContextHandler {
	mock := &MockContextHandler{ctrl: ctrl}
	mock.recorder = &MockContextHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextHandler) EXPECT() *MockContextHandlerMockRecorder {
	return m.recorder
}

// BindJSON mocks base method.
func (m *MockContextHandler) BindJSON(obj any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindJSON indicates an expected call of BindJSON.
func (mr *MockContextHandlerMockRecorder) BindJSON(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockContextHandler)(nil).BindJSON), obj)
}

// Deadline mocks base method.
func (m *MockContextHandler) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextHandlerMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContextHandler)(nil).Deadline))
}

// Done mocks base method.
func (m *MockContextHandler) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextHandlerMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContextHandler)(nil).Done))
}

// Err mocks base method.
func (m *MockContextHandler) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextHandlerMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContextHandler)(nil).Err))
}

// Set mocks base method.
func (m *MockContextHandler) Set(key string, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, obj)
}

// Set indicates an expected call of Set.
func (mr *MockContextHandlerMockRecorder) Set(key, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockContextHandler)(nil).Set), key, obj)
}

// Value mocks base method.
func (m *MockContextHandler) Value(key any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextHandlerMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContextHandler)(nil).Value), key)
}
