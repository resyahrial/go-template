// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	request "github.com/resyahrial/go-template/internal/api/rest/v1/request"
	entity "github.com/resyahrial/go-template/internal/entity"
)

// MockRequestConverter is a mock of RequestConverter interface.
type MockRequestConverter struct {
	ctrl     *gomock.Controller
	recorder *MockRequestConverterMockRecorder
}

// MockRequestConverterMockRecorder is the mock recorder for MockRequestConverter.
type MockRequestConverterMockRecorder struct {
	mock *MockRequestConverter
}

// NewMockRequestConverter creates a new mock instance.
func NewMockRequestConverter(ctrl *gomock.Controller) *MockRequestConverter {
	mock := &MockRequestConverter{ctrl: ctrl}
	mock.recorder = &MockRequestConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestConverter) EXPECT() *MockRequestConverterMockRecorder {
	return m.recorder
}

// GetCreateUserRequest mocks base method.
func (m *MockRequestConverter) GetCreateUserRequest(c request.Context) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateUserRequest", c)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreateUserRequest indicates an expected call of GetCreateUserRequest.
func (mr *MockRequestConverterMockRecorder) GetCreateUserRequest(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateUserRequest", reflect.TypeOf((*MockRequestConverter)(nil).GetCreateUserRequest), c)
}

// MockResponseConverter is a mock of ResponseConverter interface.
type MockResponseConverter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseConverterMockRecorder
}

// MockResponseConverterMockRecorder is the mock recorder for MockResponseConverter.
type MockResponseConverterMockRecorder struct {
	mock *MockResponseConverter
}

// NewMockResponseConverter creates a new mock instance.
func NewMockResponseConverter(ctrl *gomock.Controller) *MockResponseConverter {
	mock := &MockResponseConverter{ctrl: ctrl}
	mock.recorder = &MockResponseConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseConverter) EXPECT() *MockResponseConverterMockRecorder {
	return m.recorder
}

// GetCreateUserResponse mocks base method.
func (m *MockResponseConverter) GetCreateUserResponse(user *entity.User) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateUserResponse", user)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreateUserResponse indicates an expected call of GetCreateUserResponse.
func (mr *MockResponseConverterMockRecorder) GetCreateUserResponse(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateUserResponse", reflect.TypeOf((*MockResponseConverter)(nil).GetCreateUserResponse), user)
}

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// BindJSON mocks base method.
func (m *MockContext) BindJSON(obj any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindJSON indicates an expected call of BindJSON.
func (mr *MockContextMockRecorder) BindJSON(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockContext)(nil).BindJSON), obj)
}

// Deadline mocks base method.
func (m *MockContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContext)(nil).Deadline))
}

// Done mocks base method.
func (m *MockContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContext)(nil).Done))
}

// Err mocks base method.
func (m *MockContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err))
}

// Value mocks base method.
func (m *MockContext) Value(key any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value), key)
}
