// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /users)
	CreateUser(c *gin.Context)

	// (GET /users/{userID})
	GetUserByID(c *gin.Context, userID UserID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateUser(c)
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", c.Param("userID"), &userID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userID: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUserByID(c, userID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/users", wrapper.CreateUser)

	router.GET(options.BaseURL+"/users/:userID", wrapper.GetUserByID)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWX2/bNhD/KsJtj7LoZB0QCBiwtc2CAEMxtOteijxcpLPMTiK54ymOYei7DyRlx38U",
	"zAWMvkm8fz/e/e6OG6hs56whIx7KDThk7EiI499nT3z/PnzV5CvWTrQ1UELvibP795CDDr8OZQk5GOxo",
	"FEYZ07+9ZqqhFO4pB18tqcPgTdYuaHphbRoYhiEoe2eNpxj3ltnyByu/297U4aCyRshI+ETnWl1hQKK+",
	"+gBns+f5R6YFlPCDermWSlKvotcU7fA6xkq2CKEySip5QvDZ0LOjSug7YOh3sY5A/I2trjFpXRKEn0Lx",
	"tAv2giKQ4ONYnW+C4Ng6YtGppjXK/wILoSCgGgliH79SJVNAvTZNS1kk4pY60XJ0tWPRKRDaHh+z8CTs",
	"WAH/io/4hXWtAyZs/zzQ0EKdn4iyC4LMuIaJu07AiHk5BdGhbidDpE4864bB9TsmFDo7QA7PM4tOzypb",
	"U0NmRs/COBNsotXIoWCwnQB58jS8Cu3bXUZnDr1fWa4vghFbt0TTd3mnzS83iXQTPNRmYbdtgJXs5Qn8",
	"GpessWU0TYNXV782QVBUtnuZjh+jLLv9R2efRnU4Yfdf1LkWhbKF5ayxmWMbAeTQ6orGPhwd/uawWlJ2",
	"Xcwhh54DjqWI86VSq9WqwCguLDdqtPXqj/t3tx8+3c6ui3mxlC4CEC1tcHdnZ9vokMMTsU+Qrop5MQ+K",
	"1pFBp6GEn+JRHsd/zKoK7Zi6xXo5XRuJZz7DzNAq9m4B0SHHEXJf73Qi4dMGIS9vbb2+2PDbI/zEXEmS",
	"Hb6TLXa8qa7n89cC7vTUwQQdcnhzjtHx8B9y+Plsu73NFWkcaf8lNruHh3CUaqU2aVsPwW9DEzW7I8mC",
	"Wfa4Thv/sFx3JEH6dh1l+6+HL9NAX1TU+LoYHi6T0zdn5mb3rrhoRsPqIX7aXv0wieh0lqQHPVoq1doK",
	"26X1Um6cZRkUOq2erkLrIWt8bGnsJx5rs8C+FSjhZn4Teo9M3wUc8TfAeBj+CwAA///tz/a60wkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
