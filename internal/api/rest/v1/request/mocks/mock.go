// Code generated by MockGen. DO NOT EDIT.
// Source: converter.go

// Package mock_request is a generated GoMock package.
package mock_request

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockValidatorAdapter is a mock of ValidatorAdapter interface.
type MockValidatorAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAdapterMockRecorder
}

// MockValidatorAdapterMockRecorder is the mock recorder for MockValidatorAdapter.
type MockValidatorAdapterMockRecorder struct {
	mock *MockValidatorAdapter
}

// NewMockValidatorAdapter creates a new mock instance.
func NewMockValidatorAdapter(ctrl *gomock.Controller) *MockValidatorAdapter {
	mock := &MockValidatorAdapter{ctrl: ctrl}
	mock.recorder = &MockValidatorAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorAdapter) EXPECT() *MockValidatorAdapterMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidatorAdapter) Validate(data interface{}) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", data)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorAdapterMockRecorder) Validate(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidatorAdapter)(nil).Validate), data)
}

// MockDecoderAdapter is a mock of DecoderAdapter interface.
type MockDecoderAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderAdapterMockRecorder
}

// MockDecoderAdapterMockRecorder is the mock recorder for MockDecoderAdapter.
type MockDecoderAdapterMockRecorder struct {
	mock *MockDecoderAdapter
}

// NewMockDecoderAdapter creates a new mock instance.
func NewMockDecoderAdapter(ctrl *gomock.Controller) *MockDecoderAdapter {
	mock := &MockDecoderAdapter{ctrl: ctrl}
	mock.recorder = &MockDecoderAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoderAdapter) EXPECT() *MockDecoderAdapterMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockDecoderAdapter) Decode(in, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", in, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockDecoderAdapterMockRecorder) Decode(in, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockDecoderAdapter)(nil).Decode), in, out)
}
